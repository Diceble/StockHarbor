// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StockHarbor.Domain;

#nullable disable

namespace StockHarbor.Domain.Migrations
{
    [DbContext(typeof(StockHarborDatabaseContext))]
    [Migration("20250622090821_AddPriceToProductVariant")]
    partial class AddPriceToProductVariant
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StockHarbor.Domain.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("StockHarbor.Domain.Entities.ProductVariant", b =>
                {
                    b.Property<int>("ProductVariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductVariantId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ProductVariantId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("StockHarbor.Domain.Entities.ProductVariantSupplier", b =>
                {
                    b.Property<int>("ProductVariantId")
                        .HasColumnType("integer");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductVariantSupplierId")
                        .HasColumnType("integer");

                    b.Property<string>("SupplierProductCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProductVariantId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProductVariantSuppliers");
                });

            modelBuilder.Entity("StockHarbor.Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("StockHarbor.Domain.Entities.ProductVariant", b =>
                {
                    b.HasOne("StockHarbor.Domain.Entities.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("StockHarbor.Domain.Entities.Money", "Price", b1 =>
                        {
                            b1.Property<int>("ProductVariantId")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("PriceAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PriceCurrency");

                            b1.HasKey("ProductVariantId");

                            b1.ToTable("ProductVariants");

                            b1.WithOwner()
                                .HasForeignKey("ProductVariantId");
                        });

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StockHarbor.Domain.Entities.ProductVariantSupplier", b =>
                {
                    b.HasOne("StockHarbor.Domain.Entities.ProductVariant", "ProductVariant")
                        .WithMany("ProductVariantSuppliers")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockHarbor.Domain.Entities.Supplier", "Supplier")
                        .WithMany("ProductVariantSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariant");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("StockHarbor.Domain.Entities.Product", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("StockHarbor.Domain.Entities.ProductVariant", b =>
                {
                    b.Navigation("ProductVariantSuppliers");
                });

            modelBuilder.Entity("StockHarbor.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("ProductVariantSuppliers");
                });
#pragma warning restore 612, 618
        }
    }
}
